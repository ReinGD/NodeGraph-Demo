#include "OutputNode.h"
#include <iostream>

OutputNode::OutputNode()
	:NodeBase(), input(this, Pin::PinType::INPUT, "In")
{
	input.SetValue("EMPTY");


	header = "This is the Header of the file\n\n"
		"This is file generated by the use of the NodeGraph application\n"
		"All content is generated based on the nodes used in the graph\n"
		"This particular text is generated by the Output Node\n\n"
		"\n----------------------------------------------------------------------------------------\n";

	footer = "\n----------------------------------------------------------------------------------------\n"
		"This is the footer of the file\n";
}

OutputNode::~OutputNode()
{



}

void OutputNode::Execute()
{
	{
		NodeCreator createdNode(this);
		createdNode.PrepareNode(&this->input);


		ImGui::Separator();
		if (ImGui::CollapsingHeader("Output"))
		{
			static ImGuiTextBuffer log;
	
			if (ImGui::Button("Process Message"))
			{
				log.clear();
				log.appendf(header.c_str());
				log.appendf(result.c_str());
				log.appendf(footer.c_str());
			}

			ImGui::TextUnformatted(log.begin(), log.end());

			if (ImGui::Button("Print Output"))
			{

				std::cout << header << std::endl;
				std::cout << result << std::endl;
				std::cout << footer << std::endl;


			}
		}

	}
	this->NodeFunction();

}

void OutputNode::CreateNode(const char* const _name, float xPosition, float yPosition)
{
	//CREATE
	Node* node = NodeGraph::Add(new OutputNode(), Nodes::Output, _name, xPosition, yPosition);
}

void OutputNode::NodeFunction()
{
	result = input.GetValue();
}
