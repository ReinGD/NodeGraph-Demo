#include "Contract.h"
#include "NodeCreator.h"

Contract::Contract()
	: NodeBase(),
	inputA(this, Pin::PinType::INPUT, "Sender"),
	inputB(this, Pin::PinType::INPUT, "Receiver"),
	output(this, Pin::PinType::OUTPUT, "Out")
{
	selectedSignature = 0;
	signature = Signature::HAGD;
	memset(buff, 0, 32);
}

Contract::~Contract()
{
}

void Contract::Execute()
{
	{
		NodeCreator createdNode(this);
		createdNode.PrepareNode(&this->inputA, &this->inputB, &this->output);

		if (ImGui::CollapsingHeader("Enter Values"))
		{

			ImGui::Separator();
			ImGui::SetNextItemWidth(NodeGraph::DEFAULT_WINDOW_SIZE.x);

			const char* groupSelection[] = { "HAGD", "SYLT", "FMWL", "EYP" };
			ImGui::ListBox("##list", &selectedSignature, groupSelection, IM_ARRAYSIZE(groupSelection));
			if (signature != (Signature)selectedSignature)
			{
				signature = (Signature)selectedSignature;
			}
			float width = 150.0f;

			NodeGraph::HelpMarker("Type message here");
			ImGui::SameLine();
			ImGui::Text("Message:");
			ImGui::SameLine();
			ImGui::SetNextItemWidth(width);
			ImGui::InputText("##message", buff, 32);
			message = buff;

		}
	}
	//----------- Scope ends Here

	this->NodeFunction();

}

void Contract::CreateNode(const char* const _name, float xPosition, float yPosition)
{
	NodeGraph::Add(new Contract(), Nodes::Transaction, _name, xPosition, yPosition);
}

void Contract::NodeFunction()
{
	std::string from = inputA.GetValue();
	std::string to = inputB.GetValue();

	result = "This text is generated by the Contract Node\n";
	result.append("This is a contract between ");
	result.append(from.c_str());
	result.append(" and ");
	result.append(to.c_str());
	result.append("\n\n");

	result.append("Message Sent:\n");
	result.append(message.c_str());
	result.append("\n\n");


	std::string signatureLine;
	switch (signature)
	{
	case Contract::Signature::HAGD:
		signatureLine = "Have a good day!\n";
		break;
	case Contract::Signature::SYLT:
		signatureLine = "See you later!\n";
		break;
	case Contract::Signature::FMWL:
		signatureLine = "From me with love!\n";
		break;
	case Contract::Signature::EYP:
		signatureLine = "Enjoy your package!\n";
		break;
	default:
		assert(false);
		break;
	}

	result.append(signatureLine.c_str());
	result.append("\n");

	output.SetValue(result);

}
